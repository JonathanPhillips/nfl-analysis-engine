name: NFL Analysis Engine CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 isort mypy

    - name: Run Black (code formatting)
      run: black --check --diff src/ tests/

    - name: Run isort (import sorting)
      run: isort --check-only --diff src/ tests/

    - name: Run flake8 (linting)
      run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

    - name: Run mypy (type checking)
      run: mypy src/ --ignore-missing-imports --no-strict-optional

  # Database Tests
  test-database:
    name: Database Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: nfl_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nfl_test
        PYTHONPATH: ${{ github.workspace }}
      run: |
        alembic upgrade head

    - name: Run database tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nfl_test
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/test_database/ -v --cov=src/database --cov-report=xml --cov-report=term

    - name: Upload database coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: database
        name: database-coverage

  # Model Tests
  test-models:
    name: Model Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run model tests
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/test_models/ -v --cov=src/models --cov-report=xml --cov-report=term

    - name: Upload model coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: models
        name: model-coverage

  # Analysis Tests (ML & Analytics)
  test-analysis:
    name: Analysis Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run analysis tests
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/test_analysis/ -v --cov=src/analysis --cov-report=xml --cov-report=term

    - name: Upload analysis coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: analysis
        name: analysis-coverage

  # API Tests
  test-api:
    name: API Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: nfl_test_api
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test database
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nfl_test_api
        PYTHONPATH: ${{ github.workspace }}
      run: |
        alembic upgrade head

    - name: Run API tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nfl_test_api
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/test_api/ -v --cov=src/api --cov-report=xml --cov-report=term

    - name: Upload API coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: api
        name: api-coverage

  # Web Tests
  test-web:
    name: Web Interface Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: nfl_test_web
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test database
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nfl_test_web
        PYTHONPATH: ${{ github.workspace }}
      run: |
        alembic upgrade head

    - name: Run web tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nfl_test_web
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/test_web/ -v --cov=src/web --cov-report=xml --cov-report=term

    - name: Upload web coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: web
        name: web-coverage

  # Data Pipeline Tests
  test-data:
    name: Data Pipeline Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run data tests
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/test_data/ -v --cov=src/data --cov-report=xml --cov-report=term

    - name: Upload data coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: data
        name: data-coverage

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test-database, test-models, test-analysis, test-api, test-web, test-data]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: nfl_integration
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test database
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nfl_integration
        PYTHONPATH: ${{ github.workspace }}
      run: |
        alembic upgrade head

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nfl_integration
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest -v --cov=src --cov-report=xml --cov-report=term --cov-report=html -m "not slow"

    - name: Upload overall coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install bandit
      run: pip install bandit[toml]

    - name: Run security scan
      run: bandit -r src/ -f json -o bandit-report.json

    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # Docker Build and Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test-integration]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: nfl-analysis-engine:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker container
      run: |
        docker run --rm -d --name nfl-test -p 8000:8000 \
          -e DATABASE_URL=sqlite:///./test.db \
          nfl-analysis-engine:test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/api/v1/health || exit 1
        
        # Stop container
        docker stop nfl-test

  # Build and Push Docker Image (only on main branch)
  docker-deploy:
    name: Build & Deploy Docker Image
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-integration]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: nfl_perf
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Set up test database
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nfl_perf
        PYTHONPATH: ${{ github.workspace }}
      run: |
        alembic upgrade head

    - name: Run performance tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nfl_perf
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest -v -m "benchmark" --benchmark-json=benchmark.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json